import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-5, 5, 1000)

plt.plot(
    x,  # evenly spaced numbers in the x-axis
    np.ones(1000) * 2  # all 2s in the y-axis
)

plt.show()

plt.plot(x, x)
plt.show()

plt.plot(x, x ** 2)
plt.show()


plt.plot(x, x ** 3 - x, c='blue')  # original func
plt.plot(x, (x + 2) ** 3 - (x + 2), c='red')  # transformed func

plt.ylim(-5, 5)

plt.show()

plt.plot(x, np.sin(x), c='blue')  # original func
plt.plot(x, np.sin(x * 2), c='red')  # transformed func

plt.ylim(-5, 5)

plt.show()


-----------------------
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
fig = plt.figure()
ax = plt.axes(projection='3d')
print("enter the first vector: ")
x = list(map(int,input().split()))
print("enter the second vector: ")
y = list(map(int,input().split()))
print("enter the third vector: ")
z = list(map(int,input().split()))
ax.plot3D(x,y,z,'red')
ax.scatter3D(x,y,z, c=z, cmap = 'binary')
plt.show()


----------------------------
import numpy as np
import matplotlib.pyplot as plt

def plot_vectors(vec1, vec2, isSum = False):
    
    label1 = "A"; label2 = "B"; label3 = "A+B"; label4 = "A-B"
    orig = [0.0, 0.0]  # position of origin of axes
    
    ax = plt.axes()
    ax.annotate(label1, [vec1[0]+0.5,vec1[1]+0.5] )   # shift position of label for better visibility
    ax.annotate(label2, [vec2[0]+0.5,vec2[1]+0.5] )
    if isSum: 
        vec3 = [vec1[0]+vec2[0], vec1[1]+vec2[1]]     # if isSum=True calculate the sum of the two vectors
        ax.annotate(label3, [vec3[0]+0.5,vec3[1]+0.5] )
        vec4 = [vec1[0]-vec2[0], vec1[1]-vec2[1]]     # if isSum=True calculate the sum of the two vectors
        ax.annotate(label4, [vec4[0]+0.5,vec4[1]+0.5] )
    
    ax.arrow(*orig, *vec1, head_width=0.4, head_length=0.65)
    ax.arrow(*orig, *vec2, head_width=0.4, head_length=0.65, ec='blue')
    if isSum:
        ax.arrow(*orig, *vec3, head_width=0.2, head_length=0.25, ec='yellow')  # plot the vector sum as well
        ax.arrow(*orig, *vec4, head_width=0.2, head_length=0.25, ec='green')
        
    plt.grid()
    e=3                                                           # shift limits by e for better visibility
    plt.xlim(min(vec1[0],vec2[0],0)-e, max(vec1[0],vec2[0],0)+e)  # set plot limits to the min/max of coordinates
    plt.ylim(min(vec1[1],vec2[1],0)-e, max(vec1[1],vec2[1],0)+e)  # so that all vectors are inside the plot area

    plt.title('Vector sum and sub',fontsize=14)

    plt.show()
    plt.close()

def find_angle(vec1, vec2, isRadians = True, isSum = False):
    vec1 = np.array(vec1)
    vec2 = np.array(vec2)
    
    product12 = np.dot(vec1,vec2)
    cos_theta = product12/(np.dot(vec1,vec1)**0.5 * np.dot(vec2,vec2)**0.5 )
    cos_theta = round(cos_theta, 12)
    theta = np.arccos(cos_theta)
    
    plot_vectors(vec1, vec2, isSum=isSum)
    if isRadians:
        return theta
    else:
        return 180*theta/np.pi

ve1 = []
ve2 = []
print("Enter vertex1 : ")
for i in range(0,2) :
    ve1.append(int(input()))
print("Enter vertex2 : ")
for i in range(0,2) :
    ve2.append(int(input()))

find_angle(ve1, ve2, isRadians = False, isSum = True)


---------------------------
